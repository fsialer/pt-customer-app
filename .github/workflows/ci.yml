name: CI
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - main
jobs:

  docker-push:
    name: Build and push image docker
    runs-on: [ubuntu-latest]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main'
    outputs:
      IMAGE_TAG: ${{ steps.set-tag.outputs.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'corretto'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      - name: Grant execute permission to Gradle
        run: chmod +x gradlew

      - name: Build Spring Boot application
        run: ./gradlew clean build

      - name: Get short commit hash
        id: vars
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Define Docker image tag
        id: set-tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "IMAGE_TAG=prod-${COMMIT_HASH}" >> $GITHUB_ENV
            echo "IMAGE_TAG=prod-${COMMIT_HASH}" >> $GITHUB_OUTPUT
          else
            echo "IMAGE_TAG=dev-${COMMIT_HASH}" >> $GITHUB_ENV
            echo "IMAGE_TAG=dev-${COMMIT_HASH}" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.NAME_IMAGE }}:${{ env.IMAGE_TAG }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ vars.NAME_IMAGE }}:${{ env.IMAGE_TAG }} \
          ${{ secrets.DOCKER_USERNAME }}/${{ vars.NAME_IMAGE }}:latest
      
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.NAME_IMAGE }}:${{ env.IMAGE_TAG }}
            docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.NAME_IMAGE }}:latest
          else
            docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.NAME_IMAGE }}:${{ env.IMAGE_TAG }}
          fi

  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs: [docker-push]
    if: always()
    steps:
      - name: Set up environment variables
        run: |
            echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
            echo "NAME_IMAGE=${{ vars.NAME_IMAGE }}" >> $GITHUB_ENV
      - name: Send notification to Discord
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
          WORKFLOW_NAME: ${{ github.workflow }}
          JOB_STATUS: ${{ needs.docker-push.result }}
          BRANCH_NAME: ${{ github.ref_name }}
          COMMIT_AUTHOR: ${{ github.actor }}
          DOCKER_USERNAME: ${{ env.DOCKER_USERNAME }}
          NAME_IMAGE: ${{ env.NAME_IMAGE }}
          IMAGE_TAG: ${{needs.docker-push.outputs.IMAGE_TAG}}
          PROJECT: ${{github.repository}}
        run: |
          if [ "$JOB_STATUS" == "success" ]; then
            STATUS_MSG="‚úÖ √âxito"
            if [ "$BRANCH_NAME" == "main" ]; then
                DOCKER_SUMMARY="üêã Docker image: $DOCKER_USERNAME/$NAME_IMAGE:$IMAGE_TAG\n$DOCKER_USERNAME/$NAME_IMAGE:latest"
            else
                DOCKER_SUMMARY="üêã Docker image: $DOCKER_USERNAME/$NAME_IMAGE:$IMAGE_TAG"
            fi
            COLOR=3066993  # Verde
          else
            STATUS_MSG="‚ùå Fallo"
            COLOR=15158332 # Rojo
            DOCKER_SUMMARY="‚ùå Image can't generate."
          fi

          curl -H "Content-Type: application/json" \
               -X POST \
               -d '{
                    "embeds": [{
                      "title": "'"$WORKFLOW_NAME"'",
                      "description": "'"$STATUS_MSG"' en la rama **'"$BRANCH_NAME"'** por **'"$COMMIT_AUTHOR"'**.\n'"$DOCKER_SUMMARY"' del proyecto: **'"$PROJECT"'**",
                      "color": '"$COLOR"',
                      "timestamp": "'"$(date --iso-8601=seconds)"'"
                    }]
                  }' \
               $DISCORD_WEBHOOK